#################################
#
# Backend
#
#################################

# Backend to use: "xrender" or "glx".
# GLX backend is typically much faster but depends on a sane driver.
# backend = "glx";

backend = "glx";

#################################
#
# GLX backend
#
#################################

glx-no-stencil = true;

# GLX backend: Copy unmodified regions from front buffer instead of redrawing them all.
# My tests with nvidia-drivers show a 10% decrease in performance when the whole screen is modified,
# but a 20% increase when only 1/4 is.
# My tests on nouveau show terrible slowdown.
# Useful with --glx-swap-method, as well.
# NOT SUPPORTED ON LAPTOP BUILD
lx-copy-from-front = true;

# GLX backend: Use MESA_copy_sub_buffer to do partial screen update.
# My tests on nouveau shows a 200% performance boost when only 1/4 of the screen is updated.
# May break VSync and is not available on some drivers.
# Overrides --glx-copy-from-front.
glx-use-copysubbuffermesa = true;

# GLX backend: Avoid rebinding pixmap on window damage.
# Probably could improve performance on rapid window content changes, but is known to break things on some drivers (LLVMpipe).
# Recommended if it works.
glx-no-rebind-pixmap = true;

#################################
#
# Shadows
#
#################################

# Enabled client-side shadows on windows.
shadow = true;
# The blur radius for shadows. (default 12)
shadow-radius = 5;
# The left offset for shadows. (default -15)
shadow-offset-x = -5;
# The top offset for shadows. (default -15)
shadow-offset-y = -5;
# The translucency for shadows. (default .75)
shadow-opacity = 0.5;

# Set if you want different colour shadows
# shadow-red = 0.0;
# shadow-green = 0.0;
# shadow-blue = 0.0;

# Avoid drawing shadow on all shaped windows (see also: --detect-rounded-corners)
# shadow-ignore-shaped = false;


#################################
#
# Rounding
#
#################################

corner-radius = 0 # themr #

round-borders = 0;

#################################
#
# Opacity
#
#################################

# Dim inactive windows. (0.0 - 1.0)
# inactive-opacity = 0.75;
# active-opacity = 0.75;
# frame-opacity = 0.7;
# inactive-opacity-override = false;

# Do not let dimness adjust based on window opacity.
inactive-dim-fixed = true;

blur: {
	# Blur background of transparent windows. Bad performance with X Render backend. GLX backend is preferred.
	background = true;
	# Blur background of opaque windows with transparent frames as well.
	background-frame = true;
	# Do not let blur radius adjust based on window opacity.
	background-fixed = false;
	kern = "3x3box";
	method = "dual_kawase";
	strength = 16;
}


#################################
#
# Fading
#
#################################
# Fade windows during opacity changes.
fading = true; # The time between steps in a fade in milliseconds. (default 10).
fade-delta = 4; # Opacity change between steps while fading in. (default 0.028).
fade-in-step = 0.03;
# Opacity change between steps while fading out. (default 0.03).
fade-out-step = 0.03;
# Fade windows in/out when opening/closing
no-fading-openclose = true;

#################################
#
# Other
#
#################################

# Use EWMH _NET_WM_ACTIVE_WINDOW to determine which window is focused instead of using FocusIn/Out events.
# Usually more reliable but depends on a EWMH-compliant WM.
use-ewmh-active-win = true;
# Detect rounded corners and treat them as rectangular when --shadow-ignore-shaped is on.
detect-rounded-corners = true;

# Detect _NET_WM_OPACITY on client windows, useful for window managers not passing _NET_WM_OPACITY of client windows to frame windows.
# This prevents opacity being ignored for some apps.
# For example without this enabled my xfce4-notifyd is 100% opacity no matter what.
detect-client-opacity = true;

# Set VSync method. VSync methods currently available:
# none: No VSync
# drm: VSync with DRM_IOCTL_WAIT_VBLANK. May only work on some drivers.
# opengl: Try to VSync with SGI_video_sync OpenGL extension. Only work on some drivers.
# opengl-oml: Try to VSync with OML_sync_control OpenGL extension. Only work on some drivers.
# opengl-swc: Try to VSync with SGI_swap_control OpenGL extension. Only work on some drivers. Works only with GLX backend. Known to be most effective on many drivers. Does not actually control paint timing, only buffer swap is affected, so it doesnâ€™t have the effect of --sw-opti unlike other methods. Experimental.
# opengl-mswc: Try to VSync with MESA_swap_control OpenGL extension. Basically the same as opengl-swc above, except the extension we use.
# (Note some VSync methods may not be enabled at compile time.)
vsync = true;

# Enable DBE painting mode, intended to use with VSync to (hopefully) eliminate tearing.
# Reported to have no effect, though.
dbe = true;

# Unredirect all windows if a full-screen opaque window is detected, to maximize performance for full-screen windows, like games.
# Known to cause flickering when redirecting/unredirecting windows.
# paint-on-overlay may make the flickering less obvious.
unredir-if-possible = true;

# Use WM_TRANSIENT_FOR to group windows, and consider windows in the same group focused at the same time.
detect-transient = true;
# Use WM_CLIENT_LEADER to group windows, and consider windows in the same group focused at the same time.
# WM_TRANSIENT_FOR has higher priority if --detect-transient is enabled, too.
detect-client-leader = true;

use-damage = true;

#################################
#
# Shaders
#
# ###############################

window-shader-fg = "default"

rules: (
{
	match = "window_type = 'normal'"
	# shader = "/home/evan/repos/picom-shaders/Animations/matrix_dissolve.glsl"
	# shader = "/home/evan/repos/picom-shaders/Animations/glass.glsl"
	shader = "/home/evan/repos/picom-shaders/Animations/pixelize.glsl"
	# shader = "/home/evan/repos/picom-shaders/Animations/sdf_mask.glsl"
	# shader = "/home/evan/repos/picom-shaders/Animations/default_anim.glsl"
	animations = (
	{
		duration = 0.5;
		opacity-duration = 0.3;
		initial-scale = 0.8;
		triggers = ["open", "show"];
		anim-curve = {
			curve = "cubic-bezier(0, 1.5, 1, 1)";
			start = 0;
			end = 1;
			duration = "duration";
		}

		scale-x = "anim-curve * (1 - initial-scale) + initial-scale";
		scale-y = "anim-curve * (1 - initial-scale) + initial-scale";
		offset-x = "(1 - scale-x) / 2 * window-width";
		offset-y = "(1 - scale-y) / 2 * window-height";

		opacity-curve = {
			curve = "cubic-bezier(0.5, 0.5, 0.5, 0.5)";
			start = 0;
			end = 1;
			duration = "opacity-duration";
		}

		opacity = "opacity-curve";
		shadow-offset-x = "offset-x";
		shadow-offset-y = "offset-y";
		shadow-scale-x = "scale-x";
		shadow-scale-y = "scale-y";
	},
	{
		# Pop-out
		duration = 0.1;
		initial-scale = 0.8;
		triggers = ["hide"];
		anim-curve = {
			curve = "cubic-bezier(0, 0, 1, -0.5)";
			start = 1;
			end = 0;
			duration = "duration";
		}
		scale-x = "anim-curve * (1 - initial-scale) + initial-scale";
		scale-y = "anim-curve * (1 - initial-scale) + initial-scale";
		offset-x = "(1-scale-x) / 2 * window-width"
		offset-y = "(1-scale-y) / 2 * window-height"

		opacity = "anim-curve";
		shadow-offset-x = "offset-x";
		shadow-offset-y = "offset-y";
		shadow-scale-x = "scale-x";
		shadow-scale-y = "scale-y";
		},
		{
			triggers = ["close"];
			preset = "disappear";
			scale = 1.4;
			duration = 0.2;
		},
		{
			triggers = ["geometry"];
			preset = "geometry-change";
			duration = 0.2;
		}
	)},
	{
		match = "window_type = 'dock'         || "
				"window_type = 'desktop'      || "
				"class_g ~= 'Peek'            || "
				"class_i ~= 'peek'            || "
				"class_i ~= 'activate-linux'  || "
				"class_i ~= 'presel_feedback'";
		blur-background = false;
	}, {
		match = "class_g = 'Dunst'                           || "
				"class_g = 'Polybar' && class_i = 'tray'     ||"
				"class_g = 'Polybar' && class_i = 'polybar'  ||"
				"window_type = 'tooltip'";
		corner-radius = 0;
	}, {
		match = "! name~=''                       || "
				"name = 'Notification'            || "
				"name = 'Plank'                   || "
				"name = 'Docky'                   || "
				"name = 'Kupfer'                  || "
				"name = 'xfce4-notifyd'           || "
				"name *= 'VLC'                    || "
				"name *= 'compton'                || "
				"name *= 'Chromium'               || "
				"name *= 'Chrome'                 || "
				"name *= 'Firefox'                || "
				"name *= 'Vivaldi'                || "
				"class_g = 'Conky'                || "
				"class_g = 'Kupfer'               || "
				"class_g = 'Synapse'              || "
				"class_g ?= 'Notify-osd'          || "
				"class_g ?= 'Cairo-dock'          || "
				"class_g ?= 'Xfce4-notifyd'       || "
				"class_g ?= 'Xfce4-power-manager' || "
				"_GTK_FRAME_EXTENTS@                 ";
		shadow = false;
	}, {
		match = "class_g = 'Bspwm'                && "
		        "class_i = 'presel_feedback'         ";
		opacity = 20;
	}, {
		match = "class_g     = 'eww'     ||"
				"class_g     = 'Eww'     ||"
				"class_g     = 'dmenu'   ||"
				"class_g = 'Rofi'";
		animations = ({
			triggers = ["open", "show"];
			preset = "slide-in";
			direction = "left";
			duration = 0.1;
			}, {
			triggers = ["close", "hide"];
			preset = "slide-out";
			direction = "right";
			duration = 0.1;
		});
	},
	)



# Try to detect WM windows and mark them as active.
# mark-wmwin-focused = true;
# Mark all non-WM but override-redirect windows active (e.g. menus).
# true breaks inactive-opacity
# mark-ovredir-focused = false;
